# "owlcpp/external/ext/factpp.jam"
# part of owlcpp project.
# Distributed under the Boost Software License, Version 1.0; see doc/license.txt.
# Copyright Mikhail K Levin 2010-1

# Boost.build script for building FaCT++ library
# <http://code.google.com/p/factplusplus/>

import extension ;
import project ;
import regex ;
import path ;

extension.declare factpp ;

## generate header for symbol export macro
################################################################################
rule config_hpp ( targets * : sources * : properties * ) {
   STR on $(<) =
      "#ifndef FACTPP_CONFIG_HPP"
      "#define FACTPP_CONFIG_HPP"
      ""
      "#include \"boost/config.hpp\""
      "#ifndef BOOST_SYMBOL_EXPORT"
      "  #define BOOST_SYMBOL_EXPORT"
      "#endif"
      "#if defined(FACTPP_KERNEL_DYN_LINK)"
      "#  if defined(FACTPP_KERNEL_SOURCE)"
      "#     define FACTPP_KERNEL_DECL BOOST_SYMBOL_EXPORT"
      "#  else"
      "#     define FACTPP_KERNEL_DECL BOOST_SYMBOL_IMPORT"
      "#  endif"
      "#else"
      "#  define FACTPP_KERNEL_DECL"
      "#endif"
      ""
      "#ifdef BOOST_MSVC"
      "#pragma warning (push)"
      "#pragma warning (disable : 4251) // class 'A<T>' needs to have dll-interface to be used by clients of class 'B'"
      "#pragma warning (disable : 4275) // non DLL-interface classkey \"identifier\" used as base for DLL-interface"
      "#pragma warning (disable : 4290) // C++ exception specification ignored except to ..."
      "#pragma warning (disable : 4355) // 'this' : used in base member initializer list"
      "#pragma warning (disable : 4800) // forcing value to bool 'true' or 'false'"
      "#endif /* BOOST_MSVC */"
      ""
      "#endif /* FACTPP_CONFIG_HPP */"
   ;

   NL on $(<) = "
" ;
}
actions config_hpp { @($(STDOUT):E=$(STR:J=$(NL))$(NL)) > "$(<)" }

##
################################################################################
rule transform_hpp ( src_dir : version ) {
   # parseTime.h is not used
   local files = [ path.glob $(src_dir) : *.h : *parseTime.h ] ;
   local out_dir = factpp ;
   for local file in $(files) {
      make-singleton $(file:B).hpp
         : $(file) $(files)
         : @transform_hpp_action
         : <location>$(GENERATED_INCLUDE)/$(out_dir)
           <version>$(version)
      ;
   }
   return $(files) ;
}

##
################################################################################
rule replace_include ( str : incl * ) {
   local re = "^(.*) *#[ \t]*include *\"([0-9a-zA-Z_]+)\.h\"(.*)" ;
   local result = "" ;
   local parts = 1 ;
   while $(parts) {
      parts = [ MATCH $(re) : $(str) ] ;
      if $(parts) {
         parts += "" ;
         if $(parts[2]) in $(incl) {
            result = "#include \"factpp/$(parts[2]).hpp\"$(parts[3])$(result)" ;
         } else {
            result = "#include \"$(parts[2]).h\"$(parts[3])$(result)" ;
         }
         str = $(parts[1]) ;
      }
   }
   str ?= "" ;
   result = "$(str)$(result)" ;
   return $(result) ;
}

##
################################################################################
rule export_class ( str : class : file ) {
   local re = "^(.*)class[ \t]+"$(class)"([^a-zA-Z_;][^;]*[{].*)" ;
   local parts = [ MATCH $(re) : $(str) ] ;
   if $(parts) {
      return $(parts[1])"class FACTPP_KERNEL_DECL "$(class)$(parts[2]) ;
   } else {
      exit "could not find " $(class) " in " $(file) ;
   }
}

##
################################################################################
rule export_fun ( str : fun : file ) {
   local re = "^(.*)extern[ \t\n]*([a-zA-Z_][ 0-9a-zA-Z_]+[ *&\t\n]+)"$(fun)"[ \t\n]*([(][^();]*[)];.*)" ;
   local parts = [ MATCH $(re) : $(str) ] ;
   if $(parts) {
      return $(parts[1])"extern FACTPP_KERNEL_DECL "$(parts[2])$(fun)$(parts[3]) ;
   } else {
      exit "could not find " $(fun) " in " $(file) ;
   }
}

##
################################################################################
rule export_funs ( str : funs + : file ) {
   for fun in $(funs) { str = [ export_fun $(str) : $(fun) : $(file) ] ; }
   return $(str) ;
}

##
################################################################################
rule transform_hpp_action ( targets * : sources * : properties * ) {
   local files = $(sources:G=) ;
   local file_in = $(files[1]) ;
   local incl_dir = factpp ;
   local header =
      "/* Modified to control symbol export */"
      "#include \"$(incl_dir)/config.hpp\""
   ;
   import property ;
   local version = [ property.select <version> : $(properties) ] ;
   version = $(version:G=) ;
   if "tSignature" = $(file_in:B) && $(version) < "1.5.3" {
      header += "#include <iterator>" ;
   }
   local str_in = [ read_file $(file_in) ] ;
   str_in = [ replace_include $(str_in) : $(files[2-]:B) ] ;

   switch $(file_in:B) {
      case tSignature :
         if $(version) < "1.5.3" {
            header += "#include <iterator>" ;
         }

      case dltree :
         local funs =
            isSNF  isSubTree createInverse createSNFNot createSNFAnd
            createSNFReducedAnd createSNFForall createSNFGE createSNFLE TokenName
            createRole equalTrees
            ;
         str_in = [ export_funs $(str_in) : $(funs) : $(file_in) ] ;

      case Kernel :
         str_in = [ export_class $(str_in) : ReasoningKernel : $(file_in) ] ;
         local re = "const[ \t\n]+char[ \t\n]*[*][ \t\n]*getVersion[ \t\n]*[(][a-z \t\n]*[)][ \t\n]*[{][^}]*[}]" ;
         local decl = "//definition moved to Kernel.cpp to fix MSVC linking
const char* getVersion();" ;
         str_in = [ regex.replace $(str_in) $(re) $(decl) ] ;

      case Actor :
         str_in = [ export_class $(str_in) : Actor : $(file_in) ] ;
      case DLConceptTaxonomy :
         str_in = [ export_class $(str_in) : DLConceptTaxonomy : $(file_in) ] ;
      case dlTBox :
         str_in = [ export_class $(str_in) : TBox : $(file_in) ] ;
      case Reasoner :
         str_in = [ export_class $(str_in) : DlSatTester : $(file_in) ] ;
      case RoleMaster :
         str_in = [ export_class $(str_in) : RoleMaster : $(file_in) ] ;
      case Taxonomy :
         str_in = [ export_class $(str_in) : Taxonomy : $(file_in) ] ;
      case tDLAxiom :
         str_in = [ export_class $(str_in) : TDLAxiom : $(file_in) ] ;
      case tExpressionManager :
         str_in = [ export_class $(str_in) : TExpressionManager : $(file_in) ] ;
      case tNamedEntry :
         str_in = [ export_class $(str_in) : TNamedEntry : $(file_in) ] ;
      case tRole :
         str_in = [ export_class $(str_in) : TRole : $(file_in) ] ;
      case tConcept :
         str_in = [ export_class $(str_in) : TConcept : $(file_in) ] ;
   }

   STR on $(<) = $(header) "" $(str_in) ;
   NL on $(<) = "
" ;
}
actions transform_hpp_action { @($(STDOUT):E=$(STR:J=$(NL))$(NL)) > "$(<)" }

##
################################################################################
rule transform_cpp ( src_dir : version : headers * ) {
   # parseTime.cpp does not compile under Windows
   local files = [ path.glob $(src_dir) : *.cpp : *parseTime.cpp ] ;
   local out_dir = factpp ;
   for local file in $(files) {
      make-singleton $(file:D=$(GENERATED_LIB)/$(out_dir))
         :  $(file) $(headers)
         :  @transform_cpp_action
      ;
   }
   return $(files:D=$(GENERATED_LIB)/$(out_dir)) ;
}

##
################################################################################
rule transform_cpp_action ( targets * : sources * : properties * ) {
   local files = $(sources:G=) ;
   local src = [ read_file $(files[1]) ] ;
   src = [ replace_include $(src) : $(files[2-]:B) ] ;

   #make getVersion definition in Kernel.cpp
   if Kernel = $(files[1]:B) {
      local re = "\"factpp/Kernel.hpp\"" ;
      local def = "\"factpp/Kernel.hpp\"
//definition moved from Kernel.hpp to fix MSVC linking
const char* ReasoningKernel::getVersion() { return ReasoningKernel::Version; }" ;
      src = [ regex.replace $(src) $(re) $(def) ] ;
   }

   STR on $(<) = $(src) ;
}
actions transform_cpp_action { @($(STDOUT):E=$(STR)) > "$(<)" }

##
################################################################################
rule init ( version ? : location : options * )
{
   version ?= default ;

   local kernel_location = [ path.join $(location) src/Kernel ] ;

   make-singleton config.hpp
      :
      :  @config_hpp
      :  <factpp-version>$(version)
         <location>$(GENERATED_INCLUDE)/factpp
   ;

   local headers = [ transform_hpp $(kernel_location) : $(version) ] ;
   local src = [ transform_cpp $(kernel_location) : $(version) : $(headers) ] ;

   local requirements =
      [ extension.define factpp $(version) : $(kernel_location) : $(options) ]
      <include>$(GENERATED_INCLUDE)
      <implicit-dependency>config.hpp
      <implicit-dependency>$(headers:B).hpp
      <define>FACTPP_KERNEL_SOURCE
      <link>shared:<define>FACTPP_KERNEL_DYN_LINK
      <toolset>gcc,<target-os>linux:<cflags>"-fvisibility=hidden -fvisibility-inlines-hidden"
   ;

   lib factpp_kernel
      :   $(src)
      :   $(requirements)
      :   #default build properties
      :   #usage requirements
         <include>$(GENERATED_INCLUDE)
         <link>shared:<define>FACTPP_KERNEL_DYN_LINK
      ;
}
